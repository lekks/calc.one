{"version":3,"sources":["calculator/Expression.ts","components/CalcButton.tsx","components/ExpressionPanel.tsx","components/ExpressionStack.tsx","components/InputPanel.tsx","calculator/Editor.ts","calculator/operations.ts","calculator/Calculator.ts","calculator/Stack.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["OperationRank","CalcButton","props","onClick","subject","next","type","action","payload","tag","onKeyDown","e","key","keybind","document","addEventListener","removeEventListener","this","className","caption","React","Component","ExpressionPanel","expression","result","Number","toFixed","resStr","isNaN","String","texStr","texFormula","math","ExpressionStack","subscription","state","expressions","subscribe","setState","unsubscribe","reversed","slice","reverse","map","expr","index","Fragment","InputPanel","text","Editor","symbolInput","Subject","stringInput","BehaviorSubject","value","pipe","mergeAll","filter","allowedSymbols","includes","scan","symbolReducer","str","length","NaN","getValue","symbol","acc","BS_SYMBOL","CLEAR_SYMBOL","indexOf","NumberExpression","tex","result_value","toString","parseFloat","NUMBER","buildOperandTexStr","toEmbrace","getTex","ArithmeticExpression","calc","rank","associative","explicitTexParentheses","left","right","tex_formula","buildTex","getResult","getRank","builder","needLeftParenthesis","useExplicitTexParentheses","needRightParenthesis","FunctionExpression","arg","FUNC","UnaryMinusExpression","Operations","operation","operands","operationsTable","build","operandsNumber","a","b","PLUS_MINUS","MULT__DIV","leftExpr","rightExpr","x","Math","sqrt","getArg","CalcInputType","Stack","expressionStack","stack","history","asObservable","popHistory","publishStack","last","pop","num","stashHistory","splice","push","calculator","calcInputEvent","calcEditorStringInput","clipboardOutput","editorText","stackResult","undefined","editor","processInputEvent","bind","getExpressionsObservable","exprStack","combineLatest","distinctUntilChanged","getInput","oper","ops","defined","stackGet","notEmpty","getLength","operandsExpr","getTop","editorExpression","addSymbol","addOperation","buildExpression","event","ADD_NUMBER","OPERATION","DEL","del","CLEAR","clear","BS","backSpace","ENTER","duplicate","SWAP","swap","App","getExpressionStackObservable","getEditorTextObservable","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","clipboardData","string","getData","preventDefault","setData","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e9868246.chunk.js","sourcesContent":["export enum OperationRank {\n    PLUS_MINUS,\n    MULT__DIV,\n    FUNC,\n    NUMBER\n}\n\nexport type Result = number;\n\nexport interface Expression {\n    getResult(): Result;\n\n    getRank(): OperationRank;\n\n    getTex(): string;\n\n    useExplicitTexParentheses(): boolean;\n}\n\nexport class NumberExpression implements Expression {\n    private readonly tex: string;\n    private readonly result_value: number;\n\n    constructor(value: string | number) {\n        if (typeof value === 'number') {\n            this.tex = value.toString();\n            this.result_value = value;\n        } else {\n            this.result_value = parseFloat(value);\n            this.tex = value;\n        }\n    }\n\n    getResult(): Result {\n        return this.result_value;\n    }\n\n    getRank(): number {\n        return OperationRank.NUMBER\n    }\n\n    getTex(): string {\n        return this.tex;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return false;\n    }\n\n}\n\ntype ArithmeticTexBuilder = (leftStr: string, rightStr: string, leftExpr: Expression, rightExpr: Expression) => string;\n\nfunction buildOperandTexStr(expr: Expression, toEmbrace: boolean): string {\n    return toEmbrace ? `\\\\left(${expr.getTex()}\\\\right)` : `${expr.getTex()}`;\n}\n\nexport class ArithmeticExpression implements Expression {\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n    private readonly explicitTexParentheses: boolean;\n\n    constructor(tex: ArithmeticTexBuilder,\n                calc: (...args: Result[]) => Result,\n                private readonly rank: OperationRank,\n                private readonly associative: boolean,\n                explicitTexParentheses: boolean,\n                private readonly left: Expression,\n                private readonly right: Expression) {\n        this.explicitTexParentheses = explicitTexParentheses;\n        this.tex_formula = this.buildTex(tex);\n        this.result_value = calc(left.getResult(), right.getResult());\n    }\n\n    getResult(): Result {\n        return this.result_value;\n    }\n\n    getRank(): OperationRank {\n        return this.rank;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return this.explicitTexParentheses;\n    }\n\n    private needLeftParenthesis(): boolean {\n        return this.rank > this.left.getRank()\n    }\n\n    private needRightParenthesis(): boolean {\n        return this.rank > this.right.getRank() || (!this.associative && this.rank === this.right.getRank())\n    }\n\n    private buildTex(builder: ArithmeticTexBuilder): string {\n        const leftStr = buildOperandTexStr(this.left, this.needLeftParenthesis() && this.left.useExplicitTexParentheses());\n        const rightStr = buildOperandTexStr(this.right, this.needRightParenthesis() && this.right.useExplicitTexParentheses());\n        return builder(leftStr, rightStr, this.left, this.right);\n    }\n}\n\nexport class FunctionExpression implements Expression {\n\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n\n    constructor(\n        calc: (arg: Result) => Result,\n        buildTex: (arg: string, expr: Expression) => string,\n        private readonly arg: Expression) {\n        this.tex_formula = buildTex(buildOperandTexStr(arg, arg.useExplicitTexParentheses()), arg);\n        this.result_value = calc(arg.getResult());\n    }\n\n    getRank(): OperationRank {\n        return OperationRank.FUNC;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return false;\n    }\n\n    getResult(): number {\n        return this.result_value;\n    }\n\n}\n\n\nclass UnaryMinusExpression implements Expression {\n\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n\n    constructor(\n        private readonly arg: Expression) {\n        this.tex_formula = `{-${buildOperandTexStr(arg, arg.useExplicitTexParentheses())}}`;\n        this.result_value = -arg.getResult();\n    }\n\n    getRank(): OperationRank {\n        return OperationRank.FUNC;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return true;\n    }\n\n    getResult(): number {\n        return this.result_value;\n    }\n\n    getArg(): Expression {\n        return this.arg;\n    }\n\n}\n\nexport function invertExpresson(arg: Expression) {\n    if (arg instanceof UnaryMinusExpression)\n        return arg.getArg();\n    else\n        return new UnaryMinusExpression(arg);\n}","import React from 'react';\nimport {Subject} from \"rxjs\";\nimport {CalcInputEvent, CalcInputType} from \"../calculator/Calculator\";\n\n\ninterface Props {\n    caption: string;\n    tag?: string;\n    action: CalcInputType;\n    keybind?: string;\n    subject: Subject<CalcInputEvent>;\n}\n\nclass CalcButton extends React.Component<Props, any> {\n    constructor(props: Props) {\n        super(props,);\n        document.addEventListener(\"keydown\", this.onKeyDown)\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.onKeyDown);\n    }\n\n    public render() {\n        return (\n            <div onClick={this.onClick} className={\"Button\"}>\n                {this.props.caption}\n            </div>\n        );\n    }\n\n    private onClick = () => {\n        this.props.subject.next({type: this.props.action, payload: this.props.tag})\n    };\n\n    private onKeyDown = (e: KeyboardEvent) => {\n        if (e.key === this.props.keybind) {\n            this.onClick()\n        }\n        // console.log(e)\n    }\n}\n\nexport default CalcButton;\n","import React from 'react';\n\nimport 'katex/dist/katex.min.css';\nimport {BlockMath} from 'react-katex';\nimport {StackItem} from \"../calculator/Calculator\";\n\nconst ROUND = 6;\n\ninterface Props {\n    expression: StackItem;\n}\n\nconst ExpressionPanel: React.FC<Props> = (expression) => {\n    const result = Number(expression.expression.result.toFixed(ROUND));\n    const resStr: string = isNaN(result) ? \"?\" : String(result);\n    //Choosing fonts (overrides ,katex): https://katex.org/docs/supported.html#style-color-size-and-font\n    const texStr: string = `${expression.expression.texFormula}=${resStr}`;\n    return (\n        <div className=\"Expression\">\n            <BlockMath math={texStr}/>\n        </div>\n\n    );\n};\n\nexport default ExpressionPanel;\n","import React from 'react';\nimport ExpressionPanel from \"./ExpressionPanel\";\nimport {StackItem} from \"../calculator/Calculator\";\nimport {Subject, Subscription} from \"rxjs\";\n\ninterface State {\n    expressions: StackItem[];\n}\n\ninterface Props {\n    subject: Subject<StackItem[]>;\n}\n\nclass ExpressionStack extends React.Component<any, State> {\n    private subscription?: Subscription;\n\n    constructor(props: Props) {\n        super(props,);\n        this.state = {expressions: []};\n        this.subscription = props.subject.subscribe((expressions) => {\n            this.setState({expressions})\n        })\n    }\n\n\n    public componentWillUnmount() {\n        this.subscription && this.subscription.unsubscribe();\n    }\n\n    render() {\n        const reversed = this.state.expressions.slice().reverse();\n        return (\n            <div className=\"Stack\">\n                {reversed.map((expr: StackItem, index) =>\n                    <React.Fragment key={index}>\n                        {index ? <hr/> : null}\n                        <ExpressionPanel expression={expr}/>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ExpressionStack;\n","import React from 'react';\n\nimport {Subject, Subscription} from \"rxjs\";\n\ninterface State {\n    text: string;\n}\n\ninterface Props {\n    subject: Subject<string>;\n}\n\nclass InputPanel extends React.Component<any, State> {\n    subscription: Subscription;\n\n    constructor(props: Props) {\n        super(props,);\n        this.state = {text: \"\"};\n        this.subscription = props.subject.subscribe((text) => {\n            this.setState({text})\n        })\n\n    }\n\n    public componentWillUnmount() {\n        this.subscription.unsubscribe();\n    }\n\n    render() {\n        return (\n            <div className=\"Input\">\n                {this.state.text}\n            </div>\n        );\n    }\n\n}\n\nexport default InputPanel;\n","import {BehaviorSubject, Subject} from \"rxjs\";\nimport {filter, map, mergeAll, scan} from \"rxjs/operators\";\n\nexport class Editor {\n    public static readonly CLEAR_SYMBOL = \"DEL\"\n    public static readonly BS_SYMBOL = \"BS\"\n    private static readonly allowedSymbols: string[] = [\n        '.', ',', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        Editor.CLEAR_SYMBOL, Editor.BS_SYMBOL\n    ];\n    public readonly symbolInput = new Subject<string>();\n    public readonly stringInput = new Subject<string>();\n    public readonly expression = new BehaviorSubject<string>(\"\");\n    public readonly value = new Subject<number>();\n\n    constructor() {\n        this.stringInput.pipe(mergeAll()).subscribe(this.symbolInput)\n        this.symbolInput.pipe(\n            filter(value => Editor.allowedSymbols.includes(value)),\n            scan(Editor.symbolReducer, \"\")\n        ).subscribe(this.expression);\n        this.expression.pipe(map(str => str.length ? Number(str) : NaN)).subscribe(this.value)\n    }\n\n    private static symbolReducer(acc: string, expr: string) {\n        if (expr === Editor.BS_SYMBOL) {\n            if (acc.length > 0) {\n                return acc.slice(0, -1);\n            } else {\n                return acc;\n            }\n        }\n        if (expr === Editor.CLEAR_SYMBOL) {\n            return \"\"\n        }\n        if (expr === ',')\n            expr = '.'\n        if (expr === '.' && acc.indexOf(expr) !== -1)\n            return acc;\n        return acc + expr;\n    }\n\n    getInput(): string {\n        return this.expression.getValue();\n    }\n\n    notEmpty(): boolean {\n        return this.expression.getValue().length !== 0;\n    }\n\n    addSymbol(symbol: string) {\n        return this.symbolInput.next(symbol);\n    }\n}\n","import {ArithmeticExpression, Expression, FunctionExpression, invertExpresson, OperationRank,} from \"./Expression\";\n\n\ninterface OptParam {\n    operandsNumber: number,\n\n    build(...operands: Expression[]): Expression,\n}\n\nexport default class Operations {\n    static readonly operationsTable: { [opt: string]: OptParam } = {\n        \"+\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}+${b}`, (a, b) => a + b, OperationRank.PLUS_MINUS, true, true, a, b)\n            },\n        },\n        \"-\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}-${b}`, (a, b) => a - b, OperationRank.PLUS_MINUS, false, true, a, b)\n            },\n        },\n        \"*\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}\\\\times${b}`, (a, b) => a * b, OperationRank.MULT__DIV, true, true, a, b)\n            },\n        },\n        \"/\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b, leftExpr, rightExpr) => `\\\\frac{${leftExpr.getTex()}}{${rightExpr.getTex()}}`, (a, b) => a / b, OperationRank.MULT__DIV, false, true, a, b)\n            },\n        },\n        \"sqrt\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return new FunctionExpression((x) => Math.sqrt(x), (a, x) => `\\\\sqrt{${x.getTex()}}`, x)\n            },\n        },\n        \"sqr\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return new FunctionExpression((x) => x * x, (x) => `{${x}}^2`, x)\n            },\n        },\n        \"uminus\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return invertExpresson(x)\n            },\n\n        }\n    };\n\n    static buildExpression(operation: string, ...operands: Expression[]): Expression {\n        return this.operationsTable[operation].build(...operands)\n    }\n\n    static operandsNumber(operation: string): number {\n        return this.operationsTable[operation].operandsNumber;\n    }\n\n    static defined(operation: string): boolean {\n        return operation in this.operationsTable;\n    }\n}\n\n","import {Editor} from \"./Editor\";\nimport {Expression, NumberExpression} from \"./Expression\";\nimport ops from \"./operations\";\nimport {BehaviorSubject, combineLatest, Observable, Subject} from \"rxjs\"\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {Stack} from \"./Stack\";\n\n\nexport enum CalcInputType {\n    ADD_NUMBER,\n    OPERATION,\n    ENTER,\n    SWAP,\n    BS,\n    DEL,\n    CLEAR\n}\n\nexport interface CalcInputEvent {\n    type: CalcInputType;\n    payload?: string;\n}\n\nexport interface StackItem {\n    readonly texFormula: string\n    readonly result: number\n}\n\nexport class Calculator {\n\n    public readonly calcInputEvent = new Subject<CalcInputEvent>();\n    public readonly calcEditorStringInput = new Subject<string>();\n    public readonly clipboardOutput = new BehaviorSubject<number>(NaN);\n    private readonly editorText = new Subject<string>();\n    private readonly stackResult = new BehaviorSubject<StackItem | undefined>(undefined);\n    private readonly expressionStack = new Subject<StackItem[]>();\n    private readonly editor: Editor = new Editor();\n    private readonly stack = new Stack();\n\n    constructor() {\n        this.calcInputEvent.subscribe(this.processInputEvent.bind(this))\n        this.editor.expression.subscribe(this.editorText)\n        this.calcEditorStringInput.subscribe(this.editor.stringInput)\n\n        this.stack.getExpressionsObservable().pipe(\n            map((exprStack: Expression[]): StackItem[] => exprStack.map((expr: Expression): StackItem => {\n                return {\n                    texFormula: expr.getTex(),\n                    result: expr.getResult()\n                }\n            }))\n        ).subscribe(this.expressionStack)\n\n        this.expressionStack.pipe(\n            map((stack: StackItem[]) =>\n                stack[stack.length - 1] ? stack[stack.length - 1] : undefined\n            )\n        ).subscribe(this.stackResult);\n\n        combineLatest([this.editor.value, this.stackResult]).pipe(\n            map(([editor, stack]) => {\n                return !isNaN(editor) ? editor : (stack ? stack.result : NaN)\n            }),\n            distinctUntilChanged()\n        ).subscribe(this.clipboardOutput)\n\n\n    }\n\n    public getEditorTextObservable(): Observable<string> {\n        return this.editorText.asObservable()\n    }\n\n    public getExpressionStackObservable(): Observable<StackItem[]> {\n        return this.expressionStack.asObservable()\n    }\n\n    private editorExpression(): Expression {\n        return new NumberExpression(this.editor.getInput())\n    }\n\n    private addOperation(oper: string) {\n        // operation is unknown\n        if (!ops.defined(oper)) {\n            return\n        }\n\n        // we must have in stack as much items as we need for operation\n        const opnNum: number = ops.operandsNumber(oper);\n        const stackGet = opnNum - (this.editor.notEmpty() ? 1 : 0);\n        if (stackGet > this.stack.getLength()) {\n            return\n        }\n\n        const operandsExpr: Expression[] = this.stack.getTop(stackGet)\n\n        if (this.editor.notEmpty()) {\n            operandsExpr.push(this.editorExpression());\n            this.editor.addSymbol(Editor.CLEAR_SYMBOL);\n        }\n        this.stack.addOperation(ops.buildExpression(oper, ...operandsExpr));\n    }\n\n    private processInputEvent(event: CalcInputEvent) {\n        switch (event.type) {\n            case CalcInputType.ADD_NUMBER:\n                event.payload && this.editor.addSymbol(event.payload);\n                break;\n            case CalcInputType.OPERATION:\n                event.payload && this.addOperation(event.payload);\n                break;\n            case CalcInputType.DEL:\n                if (this.editor.notEmpty()) {\n                    this.editor.addSymbol(Editor.CLEAR_SYMBOL);\n                } else {\n                    this.stack.del()\n                }\n                break;\n            case CalcInputType.CLEAR:\n                this.editor.addSymbol(Editor.CLEAR_SYMBOL);\n                this.stack.clear()\n                break;\n            case CalcInputType.BS:\n                if (this.editor.notEmpty()) {\n                    this.editor.addSymbol(Editor.BS_SYMBOL)\n                } else {\n                    this.stack.backSpace()\n                }\n                break;\n            case CalcInputType.ENTER:\n                if (this.editor.notEmpty()) {\n                    this.stack.push(this.editorExpression());\n                    this.editor.addSymbol(Editor.CLEAR_SYMBOL);\n                } else {\n                    this.stack.duplicate()\n                }\n                break;\n            case CalcInputType.SWAP:\n                if (this.editor.notEmpty()) {\n                    this.stack.push(this.editorExpression());\n                    this.editor.addSymbol(Editor.CLEAR_SYMBOL);\n                }\n                this.stack.swap();\n                break;\n        }\n    }\n}","import {Observable, Subject} from \"rxjs\";\nimport {Expression} from \"./Expression\";\n\nexport class Stack {\n    private readonly expressionStack = new Subject<Expression[]>();\n    private stack: Expression[] = [];\n    private history: Expression[][] = [];\n\n    public getExpressionsObservable(): Observable<Expression[]> {\n        return this.expressionStack.asObservable();\n    }\n\n    public backSpace() {\n        if (this.popHistory()) {\n            this.publishStack()\n        }\n    }\n\n    public popHistory(): boolean {\n        const last = this.history.pop();\n\n        if (last) {\n            this.stack = last;\n            return true;\n        } else {\n            return false\n        }\n    }\n\n    public getLength() {\n        return this.stack.length\n    }\n\n    public getTop(num: number): Expression[] {\n        this.stashHistory();\n        return this.stack.splice(-num, num);\n    }\n\n    public addOperation(expr: Expression) {\n        this.stack.push(expr);\n        this.publishStack()\n    }\n\n    public push(expr: Expression) {\n        this.stashHistory();\n        this.stack.push(expr);\n        this.publishStack()\n    }\n\n    public duplicate() {\n        if (this.stack.length > 0) {\n            this.stashHistory();\n            this.stack.push(this.stack[this.stack.length - 1]);\n            this.publishStack()\n        }\n    }\n\n    public swap() {\n        if (this.stack.length >= 2) {\n            this.stashHistory();\n            [this.stack[this.stack.length - 1], this.stack[this.stack.length - 2]] = [this.stack[this.stack.length - 2], this.stack[this.stack.length - 1]];\n            this.publishStack()\n        }\n    }\n\n    public clear() {\n        this.history = [];\n        this.stack = [];\n        this.publishStack()\n    }\n\n    public del() {\n        if (this.stack.length > 0) {\n            this.stashHistory();\n            this.stack.pop();\n            this.publishStack()\n        }\n    }\n\n    private publishStack() {\n        this.expressionStack.next(this.stack)\n    }\n\n    private stashHistory() {\n        this.history.push([...this.stack]);\n    }\n\n\n}","import React from 'react';\nimport CalcButton from './CalcButton';\nimport ExpressionStack from \"./ExpressionStack\";\nimport InputPanel from \"./InputPanel\";\nimport './App.css';\nimport {CalcInputType, Calculator} from \"../calculator/Calculator\";\n\nconst CLIPBOARD_ROUND = 8;\n\n\nconst calculator = new Calculator();\n\nconst App: React.FC = () => {\n\n    return (\n        <div className=\"App\">\n            <ExpressionStack subject={calculator.getExpressionStackObservable()}/>\n            <InputPanel subject={calculator.getEditorTextObservable()}/>\n            <div className=\"Pad\">\n                <table className=\"Buttons\">\n                    <tbody>\n                    {/*<tr>*/}\n                    {/*    <td/><td/><td/><td/>*/}\n                    {/*    <td>*/}\n                    {/*        <div className={\"Button\"} onClick={(event: any) => { console.log(\"PASTE\") }}>*/}\n                    {/*            Paste*/}\n                    {/*        </div>*/}\n                    {/*    </td>*/}\n                    {/*</tr>*/}\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"7\" tag=\"7\" keybind=\"7\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"8\" tag=\"8\" keybind=\"8\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"9\" tag=\"9\" keybind=\"9\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"/\" tag=\"/\" keybind=\"/\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"<-\" keybind=\"Backspace\" action={CalcInputType.BS}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"4\" tag=\"4\" keybind=\"4\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"5\" tag=\"5\" keybind=\"5\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"6\" tag=\"6\" keybind=\"6\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"*\" tag=\"*\" keybind=\"*\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Del\" tag=\"clear\" keybind=\"Delete\" action={CalcInputType.DEL}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"1\" tag=\"1\" keybind=\"1\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"2\" tag=\"2\" keybind=\"2\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"3\" tag=\"3\" keybind=\"3\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"-\" tag=\"-\" keybind=\"-\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Swap\" keybind=\"PageDown\" action={CalcInputType.SWAP}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"0\" tag=\"0\" keybind=\"0\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\".\" tag=\".\" keybind=\".\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td/>\n                        <td><CalcButton caption=\"+\" tag=\"+\" keybind=\"+\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Reset\" keybind=\"Escape\" action={CalcInputType.CLEAR}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td><CalcButton caption=\"√\" tag=\"sqrt\" keybind=\"\\\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"x²\" tag=\"sqr\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"-x\" tag=\"uminus\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td/>\n                        <td><CalcButton caption=\"Enter\" keybind=\"Enter\" action={CalcInputType.ENTER}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\n\nexport function registerClipboardSupport() {\n    function toSeasonableString(x: number): string {\n        return String(Number(x.toFixed(CLIPBOARD_ROUND)))\n    }\n\n    window.document.addEventListener('paste', (e) => {\n        if (e.clipboardData) {\n            const string = e.clipboardData.getData('text/plain');\n            calculator.calcEditorStringInput.next(string);\n        }\n        e.preventDefault();\n    });\n\n    window.document.addEventListener('copy', (e) => {\n        const result = calculator.clipboardOutput.getValue();\n        if (!isNaN(result)) {\n            e.clipboardData && e.clipboardData.setData('text/plain', toSeasonableString(result));\n        }\n        e.preventDefault();\n    });\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App, {registerClipboardSupport} from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nregisterClipboardSupport();\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}