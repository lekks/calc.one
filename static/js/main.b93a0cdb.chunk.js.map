{"version":3,"sources":["calculator/Expression.ts","components/CalcButton.tsx","components/ExpressionPanel.tsx","components/ExpressionStack.tsx","components/InputPanel.tsx","calculator/Editor.ts","calculator/operations.ts","calculator/Calculator.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["OperationRank","CalcButton","props","onClick","subject","next","type","action","payload","tag","onKeyDown","e","key","keybind","document","addEventListener","removeEventListener","this","className","caption","React","Component","ExpressionPanel","expression","result","Number","toFixed","resStr","isNaN","String","texStr","texFormula","math","ExpressionStack","subscription","state","expressions","subscribe","setState","unsubscribe","reversed","slice","reverse","map","expr","index","Fragment","InputPanel","text","Editor","length","allowed","indexOf","NumberExpression","value","tex","result_value","toString","parseFloat","NUMBER","buildOperandTexStr","toEmbrace","getTex","ArithmeticExpression","calc","rank","associative","explicitTexParentheses","left","right","tex_formula","buildTex","getResult","getRank","builder","needLeftParenthesis","useExplicitTexParentheses","needRightParenthesis","FunctionExpression","arg","FUNC","UnaryMinusExpression","Operations","operation","operands","operationsTable","build","operandsNumber","a","b","PLUS_MINUS","MULT__DIV","leftExpr","rightExpr","x","Math","sqrt","getArg","CalcInputType","calculator","editorText","Subject","expressionStack","calcInputEvent","editor","stack","history","event","processInputEvent","backSpace","onInputChange","popHistory","onStackChange","last","pop","push","notEmpty","stashHistory","editorExpression","clear","getInput","oper","ops","defined","stackGet","operandsExpr","splice","buildExpression","addSymbol","getStack","ADD_NUMBER","addNumber","OPERATION","addOperation","DEL","del","CLEAR","BS","ENTER","SWAP","swap","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b93a0cdb.chunk.js","sourcesContent":["export enum OperationRank {\n    PLUS_MINUS,\n    MULT__DIV,\n    FUNC,\n    NUMBER\n}\n\nexport type Result = number;\n\nexport interface Expression {\n    getResult(): Result;\n\n    getRank(): OperationRank;\n\n    getTex(): string;\n\n    useExplicitTexParentheses(): boolean;\n}\n\nexport class NumberExpression implements Expression {\n    private readonly tex: string;\n    private readonly result_value: number;\n\n    constructor(value: string | number) {\n        if (typeof value === 'number') {\n            this.tex = value.toString();\n            this.result_value = value;\n        } else {\n            this.result_value = parseFloat(value);\n            this.tex = value;\n        }\n    }\n\n    getResult(): Result {\n        return this.result_value;\n    }\n\n    getRank(): number {\n        return OperationRank.NUMBER\n    }\n\n    getTex(): string {\n        return this.tex;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return false;\n    }\n\n}\n\ntype ArithmeticTexBuilder = (leftStr: string, rightStr: string, leftExpr: Expression, rightExpr: Expression) => string;\n\nfunction buildOperandTexStr(expr: Expression, toEmbrace: boolean): string {\n    return toEmbrace ? `\\\\left(${expr.getTex()}\\\\right)` : `${expr.getTex()}`;\n}\n\nexport class ArithmeticExpression implements Expression {\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n    private readonly explicitTexParentheses: boolean;\n\n    constructor(tex: ArithmeticTexBuilder,\n                calc: (...args: Result[]) => Result,\n                private readonly rank: OperationRank,\n                private readonly associative: boolean,\n                explicitTexParentheses: boolean,\n                private readonly left: Expression,\n                private readonly right: Expression) {\n        this.explicitTexParentheses = explicitTexParentheses;\n        this.tex_formula = this.buildTex(tex);\n        this.result_value = calc(left.getResult(), right.getResult());\n    }\n\n    getResult(): Result {\n        return this.result_value;\n    }\n\n    getRank(): OperationRank {\n        return this.rank;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return this.explicitTexParentheses;\n    }\n\n    private needLeftParenthesis(): boolean {\n        return this.rank > this.left.getRank()\n    }\n\n    private needRightParenthesis(): boolean {\n        return this.rank > this.right.getRank() || (!this.associative && this.rank === this.right.getRank())\n    }\n\n    private buildTex(builder: ArithmeticTexBuilder): string {\n        const leftStr = buildOperandTexStr(this.left, this.needLeftParenthesis() && this.left.useExplicitTexParentheses());\n        const rightStr = buildOperandTexStr(this.right, this.needRightParenthesis() && this.right.useExplicitTexParentheses());\n        return builder(leftStr, rightStr, this.left, this.right);\n    }\n}\n\nexport class FunctionExpression implements Expression {\n\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n\n    constructor(\n        calc: (arg: Result) => Result,\n        buildTex: (arg: string, expr: Expression) => string,\n        private readonly arg: Expression) {\n        this.tex_formula = buildTex(buildOperandTexStr(arg, arg.useExplicitTexParentheses()), arg);\n        this.result_value = calc(arg.getResult());\n    }\n\n    getRank(): OperationRank {\n        return OperationRank.FUNC;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return false;\n    }\n\n    getResult(): number {\n        return this.result_value;\n    }\n\n}\n\n\nclass UnaryMinusExpression implements Expression {\n\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n\n    constructor(\n        private readonly arg: Expression) {\n        this.tex_formula = `{-${buildOperandTexStr(arg, arg.useExplicitTexParentheses())}}`;\n        this.result_value = -arg.getResult();\n    }\n\n    getRank(): OperationRank {\n        return OperationRank.FUNC;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return true;\n    }\n\n    getResult(): number {\n        return this.result_value;\n    }\n\n    getArg(): Expression {\n        return this.arg;\n    }\n\n}\n\nexport function invertExpresson(arg: Expression) {\n    if (arg instanceof UnaryMinusExpression)\n        return arg.getArg();\n    else\n        return new UnaryMinusExpression(arg);\n}","import React from 'react';\nimport {Subject} from \"rxjs\";\nimport {CalcInputEvent, CalcInputType} from \"../calculator/Calculator\";\n\n\ninterface Props {\n    caption: string;\n    tag?: string;\n    action: CalcInputType;\n    keybind?: string;\n    subject: Subject<CalcInputEvent>;\n}\n\nclass CalcButton extends React.Component<Props, any> {\n    constructor(props: Props) {\n        super(props,);\n        document.addEventListener(\"keydown\", this.onKeyDown)\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.onKeyDown);\n    }\n\n    public render() {\n        return (\n            <div onClick={this.onClick} className={\"Button\"}>\n                {this.props.caption}\n            </div>\n        );\n    }\n\n    private onClick = () => {\n        this.props.subject.next({type: this.props.action, payload: this.props.tag})\n    };\n\n    private onKeyDown = (e: KeyboardEvent) => {\n        if (e.key === this.props.keybind) {\n            this.onClick()\n        }\n        // console.log(e)\n    }\n}\n\nexport default CalcButton;\n","import React from 'react';\n\nimport 'katex/dist/katex.min.css';\nimport {BlockMath} from 'react-katex';\nimport {StackItem} from \"../calculator/Calculator\";\n\nconst ROUND = 6;\n\ninterface Props {\n    expression: StackItem;\n}\n\nconst ExpressionPanel: React.FC<Props> = (expression) => {\n    const result = Number(expression.expression.result.toFixed(ROUND));\n    const resStr: string = isNaN(result) ? \"?\" : String(result);\n    //Choosing fonts (overrides ,katex): https://katex.org/docs/supported.html#style-color-size-and-font\n    const texStr: string = `${expression.expression.texFormula}=${resStr}`;\n    return (\n        <div className=\"Expression\">\n            <BlockMath math={texStr}/>\n        </div>\n\n    );\n};\n\nexport default ExpressionPanel;\n","import React from 'react';\nimport ExpressionPanel from \"./ExpressionPanel\";\nimport {StackItem} from \"../calculator/Calculator\";\nimport {Subject, Subscription} from \"rxjs\";\n\ninterface State {\n    expressions: StackItem[];\n}\n\ninterface Props {\n    subject: Subject<StackItem[]>;\n}\n\nclass ExpressionStack extends React.Component<any, State> {\n    private subscription?: Subscription;\n\n    constructor(props: Props) {\n        super(props,);\n        this.state = {expressions: []};\n        this.subscription = props.subject.subscribe((expressions) => {\n            this.setState({expressions})\n        })\n    }\n\n\n    public componentWillUnmount() {\n        this.subscription && this.subscription.unsubscribe();\n    }\n\n    render() {\n        const reversed = this.state.expressions.slice().reverse();\n        return (\n            <div className=\"Stack\">\n                {reversed.map((expr: StackItem, index) =>\n                    <React.Fragment key={index}>\n                        {index ? <hr/> : null}\n                        <ExpressionPanel expression={expr}/>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ExpressionStack;\n","import React from 'react';\n\nimport {Subject, Subscription} from \"rxjs\";\n\ninterface State {\n    text: string;\n}\n\ninterface Props {\n    subject: Subject<string>;\n}\n\nclass InputPanel extends React.Component<any, State> {\n    subscription: Subscription;\n\n    constructor(props: Props) {\n        super(props,);\n        this.state = {text: \"\"};\n        this.subscription = props.subject.subscribe((text) => {\n            this.setState({text})\n        })\n\n    }\n\n    public componentWillUnmount() {\n        this.subscription.unsubscribe();\n    }\n\n    render() {\n        return (\n            <div className=\"Input\">\n                {this.state.text}\n            </div>\n        );\n    }\n\n}\n\nexport default InputPanel;\n","export class Editor {\n    private static readonly allowed: string = \".0123456789\";\n    private expression: string = \"\";\n\n    getInput(): string {\n        return this.expression;\n    }\n\n    addSymbol(expr: string): boolean {\n        if (expr.length !== 1)\n            return false;\n        if (Editor.allowed.indexOf(expr) === -1)\n            return false;\n        if (expr === '.' && this.expression.indexOf(expr) !== -1)\n            return false;\n        this.expression += expr;\n        return true\n    }\n\n    clear() {\n        this.expression = \"\";\n    }\n\n    backSpace(): boolean {\n        if (this.expression.length > 0) {\n            this.expression = this.expression.slice(0, -1);\n            return true;\n        }\n        return false;\n    }\n\n    notEmpty(): boolean {\n        return this.expression.length !== 0;\n    }\n\n}\n","import {ArithmeticExpression, Expression, FunctionExpression, invertExpresson, OperationRank,} from \"./Expression\";\n\n\ninterface OptParam {\n    operandsNumber: number,\n\n    build(...operands: Expression[]): Expression,\n}\n\nexport default class Operations {\n    static readonly operationsTable: { [opt: string]: OptParam } = {\n        \"+\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}+${b}`, (a, b) => a + b, OperationRank.PLUS_MINUS, true, true, a, b)\n            },\n        },\n        \"-\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}-${b}`, (a, b) => a - b, OperationRank.PLUS_MINUS, false, true, a, b)\n            },\n        },\n        \"*\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}\\\\times${b}`, (a, b) => a * b, OperationRank.MULT__DIV, true, true, a, b)\n            },\n        },\n        \"/\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b, leftExpr, rightExpr) => `\\\\frac{${leftExpr.getTex()}}{${rightExpr.getTex()}}`, (a, b) => a / b, OperationRank.MULT__DIV, false, true, a, b)\n            },\n        },\n        \"sqrt\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return new FunctionExpression((x) => Math.sqrt(x), (a, x) => `\\\\sqrt{${x.getTex()}}`, x)\n            },\n        },\n        \"sqr\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return new FunctionExpression((x) => x * x, (x) => `{${x}}^2`, x)\n            },\n        },\n        \"uminus\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return invertExpresson(x)\n            },\n\n        }\n    };\n\n    static buildExpression(operation: string, ...operands: Expression[]): Expression {\n        return this.operationsTable[operation].build(...operands)\n    }\n\n    static operandsNumber(operation: string): number {\n        return this.operationsTable[operation].operandsNumber;\n    }\n\n    static defined(operation: string): boolean {\n        return operation in this.operationsTable;\n    }\n}\n\n","import {Editor} from \"./Editor\";\nimport {Expression, NumberExpression} from \"./Expression\";\nimport ops from \"./operations\";\nimport {Subject} from \"rxjs\"\n\nexport interface StackItem {\n    readonly texFormula: string\n    readonly result: number\n}\n\nexport enum CalcInputType {\n    ADD_NUMBER,\n    OPERATION,\n    ENTER,\n    SWAP,\n    BS,\n    DEL,\n    CLEAR\n}\n\nexport interface CalcInputEvent {\n    type: CalcInputType;\n    payload?: string;\n}\n\n\nexport class Calculator {\n\n    public readonly editorText = new Subject<string>();\n    public readonly expressionStack = new Subject<StackItem[]>();\n    public readonly calcInputEvent = new Subject<CalcInputEvent>();\n    private editor: Editor = new Editor();\n    private stack: Expression[] = [];\n    private history: Expression[][] = [];\n\n    constructor() {\n        this.calcInputEvent.subscribe((event) => this.processInputEvent(event))\n    }\n\n    private getStack(): StackItem[] {\n        return this.stack.map((expr) => ({\n            texFormula: expr.getTex(),\n            result: expr.getResult()\n        }));\n    }\n\n    private backSpace() {\n        if (this.editor.backSpace()) {\n            this.onInputChange();\n        } else if (this.popHistory()) {\n            this.onInputChange();\n            this.onStackChange();\n        }\n    }\n\n    private popHistory(): boolean {\n        const last = this.history.pop();\n\n        if (last) {\n            this.stack = last;\n            return true;\n        } else {\n            return false\n        }\n    }\n\n    private stashHistory() {\n        this.history.push([...this.stack]);\n    }\n\n    private push() {\n        if (this.editor.notEmpty()) {\n            this.stashHistory();\n            this.stack.push(this.editorExpression());\n            this.editor.clear();\n            this.onInputChange();\n            this.onStackChange();\n        } else if (this.stack.length > 0) {\n            this.stashHistory();\n            this.stack.push(this.stack[this.stack.length - 1]);\n            this.onInputChange();\n            this.onStackChange();\n        }\n    }\n\n    private swap() {\n        if (this.stack.length >= 2) {\n            this.stashHistory();\n            [this.stack[this.stack.length - 1], this.stack[this.stack.length - 2]] = [this.stack[this.stack.length - 2], this.stack[this.stack.length - 1]];\n            this.onStackChange();\n        }\n    }\n\n    private clear() {\n        this.editor.clear();\n        this.history = [];\n        this.stack = [];\n        this.onInputChange();\n        this.onStackChange();\n    }\n\n    private del() {\n        if (this.editor.notEmpty()) {\n            this.editor.clear();\n            this.onInputChange();\n        } else if (this.stack.length > 0) {\n            this.stashHistory();\n            this.stack.pop();\n            this.onStackChange();\n        }\n    }\n\n    private editorExpression(): Expression {\n        return new NumberExpression(this.editor.getInput())\n    }\n\n    private addOperation(oper: string) {\n        if (!ops.defined(oper)) {\n            return\n        }\n        const opnNum: number = ops.operandsNumber(oper);\n        const stackGet = opnNum - (this.editor.notEmpty() ? 1 : 0);\n        if (stackGet > this.stack.length) {\n            return\n        }\n        this.stashHistory();\n        const operandsExpr = this.stack.splice(-stackGet, stackGet);\n        if (this.editor.notEmpty()) {\n            operandsExpr.push(this.editorExpression());\n            this.editor.clear();\n        }\n        this.stack.push(ops.buildExpression(oper, ...operandsExpr));\n        this.onInputChange();\n        this.onStackChange();\n    }\n\n    private addNumber(expr: string) {\n        if (this.editor.addSymbol(expr)) {\n            this.onInputChange();\n        }\n    }\n\n    private onInputChange() {\n        this.editorText.next(this.editor.getInput())\n    }\n\n    private onStackChange() {\n        this.expressionStack.next(this.getStack())\n    }\n\n\n    private processInputEvent(event: CalcInputEvent) {\n        switch (event.type) {\n            case CalcInputType.ADD_NUMBER:\n                event.payload && this.addNumber(event.payload);\n                break;\n            case CalcInputType.OPERATION:\n                event.payload && this.addOperation(event.payload);\n                break;\n            case CalcInputType.DEL:\n                this.del();\n                break;\n            case CalcInputType.CLEAR:\n                this.clear();\n                break;\n            case CalcInputType.BS:\n                this.backSpace();\n                break;\n            case CalcInputType.ENTER:\n                this.push();\n                break;\n            case CalcInputType.SWAP:\n                this.swap();\n                break;\n        }\n    }\n\n}","import React from 'react';\nimport CalcButton from './CalcButton';\nimport ExpressionStack from \"./ExpressionStack\";\nimport InputPanel from \"./InputPanel\";\nimport './App.css';\nimport {CalcInputType, Calculator} from \"../calculator/Calculator\";\n\nconst calculator = new Calculator();\n\nconst App: React.FC = () => {\n\n    return (\n        <div className=\"App\">\n            <ExpressionStack subject={calculator.expressionStack}/>\n            <InputPanel subject={calculator.editorText}/>\n            <div className=\"Pad\">\n                <table className=\"Buttons\">\n                    <tbody>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"7\" tag=\"7\" keybind=\"7\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"8\" tag=\"8\" keybind=\"8\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"9\" tag=\"9\" keybind=\"9\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"/\" tag=\"/\" keybind=\"/\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"<-\" keybind=\"Backspace\" action={CalcInputType.BS}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"4\" tag=\"4\" keybind=\"4\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"5\" tag=\"5\" keybind=\"5\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"6\" tag=\"6\" keybind=\"6\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"*\" tag=\"*\" keybind=\"*\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Del\" tag=\"clear\" keybind=\"Delete\" action={CalcInputType.DEL}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"1\" tag=\"1\" keybind=\"1\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"2\" tag=\"2\" keybind=\"2\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"3\" tag=\"3\" keybind=\"3\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"-\" tag=\"-\" keybind=\"-\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Swap\" keybind=\"PageDown\" action={CalcInputType.SWAP}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"0\" tag=\"0\" keybind=\"0\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\".\" tag=\".\" keybind=\".\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calculator.calcInputEvent}/>\n                        </td>\n                        <td/>\n                        <td><CalcButton caption=\"+\" tag=\"+\" keybind=\"+\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Reset\" keybind=\"Escape\" action={CalcInputType.CLEAR}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td><CalcButton caption=\"√\" tag=\"sqrt\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"x²\" tag=\"sqr\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td><CalcButton caption=\"-x\" tag=\"uminus\" action={CalcInputType.OPERATION}\n                                        subject={calculator.calcInputEvent}/></td>\n                        <td/>\n                        <td><CalcButton caption=\"Enter\" keybind=\"Enter\" action={CalcInputType.ENTER}\n                                        subject={calculator.calcInputEvent}/></td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}