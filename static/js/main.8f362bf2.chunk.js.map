{"version":3,"sources":["dispatcher/AppDispatcher.ts","dispatcher/Actions.ts","components/CalcButton.tsx","actions/ButtonActions.ts","stores/Expression.ts","stores/Editor.ts","stores/operations.ts","stores/ExpressionStore.ts","components/ExpressionPanel.tsx","components/ExpressionStack.tsx","components/InputPanel.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["TypedEvent","action","payload","AppDispatcher","Dispatcher","Actions","CalcButton","props","onClick","tag","dispatch","onKeyDown","e","key","keybind","document","addEventListener","removeEventListener","this","className","caption","React","Component","OperationRank","NumberExpression","value","tex","result_value","toString","parseFloat","NUMBER","buildOperandTexStr","expr","toEmbrace","getTex","ArithmeticExpression","calc","rank","associative","explicitTexParentheses","left","right","tex_formula","buildTex","getResult","getRank","builder","needLeftParenthesis","useExplicitTexParentheses","needRightParenthesis","FunctionExpression","arg","FUNC","UnaryMinusExpression","Editor","expression","length","allowed","indexOf","slice","ExpressionEvents","operationsTable","operandsNumber","build","a","b","PLUS_MINUS","MULT__DIV","leftExpr","rightExpr","x","Math","sqrt","getArg","buildExpression","operation","operands","defined","expressionStore","editor","stack","emitter","dispatcher","dispatchToken","EventEmitter","register","reactActions","getInput","event","callback","addListener","ADD_NUMBER","addSymbol","emit","INPUT_CHANGE_EVENT","OPERATION","addOperation","STACK_CHANGE_EVENT","DEL","del","CLEAR","clear","BS","backSpace","ENTER","push","SWAP","swap","notEmpty","editorExpression","pop","oper","ops","stackGet","operandsExpr","splice","ExpressionPanel","result","Number","toFixed","resStr","isNaN","String","texStr","math","ExpressionStack","eventSubscription","onChange","setState","getStateFromStores","state","addChangeListener","remove","reversed","expressions","reverse","map","index","getStack","InputPanel","text","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f362bf2.chunk.js","sourcesContent":["import {Dispatcher} from 'flux';\nimport Actions from \"./Actions\";\n\nexport class TypedEvent<P> {\n  constructor(public action: Actions, public payload?: P) {\n  }\n}\n\nexport type Event = TypedEvent<any>;\nexport const AppDispatcher: Dispatcher<Event> = new Dispatcher();\n","enum Actions {\n    ADD_NUMBER,\n    OPERATION,\n    ENTER,\n    SWAP,\n    BS,\n    DEL,\n    CLEAR\n}\n\nexport default Actions;","import React from 'react';\nimport {buttonClick} from '../actions/ButtonActions';\nimport Actions from \"../dispatcher/Actions\";\n\ninterface Props {\n    caption: string;\n    tag?: string;\n    action: Actions;\n    keybind?: string;\n}\n\nclass CalcButton extends React.Component<Props, any> {\n    constructor(props: Props) {\n        super(props,);\n        document.addEventListener(\"keydown\", this.onKeyDown)\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.onKeyDown);\n    }\n\n    public render() {\n        return (\n            <div onClick={this.onClick} className={\"Button\"}>\n                {this.props.caption}\n            </div>\n        );\n    }\n\n    private onClick = () => {\n        buttonClick(this.props.action, this.props.tag)\n    };\n\n    private onKeyDown = (e: KeyboardEvent) => {\n        if (e.key === this.props.keybind) {\n            this.onClick()\n        }\n        // console.log(e)\n    }\n}\n\nexport default CalcButton;\n","import {AppDispatcher, TypedEvent} from '../dispatcher/AppDispatcher';\nimport Actions from \"../dispatcher/Actions\";\n\nexport function buttonClick(action: Actions, tag?: string) {\n    AppDispatcher.dispatch(new TypedEvent<string>(action, tag));\n}\n","export enum OperationRank {\n    PLUS_MINUS,\n    MULT__DIV,\n    FUNC,\n    NUMBER\n}\n\nexport type Result = number;\nexport interface Expression {\n    getResult(): Result;\n    getRank(): OperationRank;\n    getTex(): string;\n\n    useExplicitTexParentheses(): boolean;\n}\n\nexport class NumberExpression implements Expression {\n    private readonly tex: string;\n    private readonly result_value: number;\n\n    constructor(value: string | number) {\n        if (typeof value === 'number') {\n            this.tex = value.toString();\n            this.result_value = value;\n        } else {\n            this.result_value = parseFloat(value);\n            this.tex = value;\n        }\n    }\n\n    getResult(): Result {\n        return this.result_value;\n    }\n\n    getRank(): number {\n        return OperationRank.NUMBER\n    }\n\n    getTex(): string {\n        return this.tex;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return false;\n    }\n\n}\n\ntype ArithmeticTexBuilder = (leftStr: string, rightStr: string, leftExpr: Expression, rightExpr: Expression) => string;\n\nfunction buildOperandTexStr(expr: Expression, toEmbrace: boolean): string {\n    return toEmbrace ? `\\\\left(${expr.getTex()}\\\\right)` : `${expr.getTex()}`;\n}\n\nexport class ArithmeticExpression implements Expression {\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n    private readonly explicitTexParentheses: boolean;\n\n    constructor(tex: ArithmeticTexBuilder,\n                calc: (...args: Result[]) => Result,\n                private readonly rank: OperationRank,\n                private readonly associative: boolean,\n                explicitTexParentheses: boolean,\n                private readonly left: Expression,\n                private readonly right: Expression) {\n        this.explicitTexParentheses = explicitTexParentheses;\n        this.tex_formula = this.buildTex(tex);\n        this.result_value = calc(left.getResult(), right.getResult());\n    }\n\n    getResult(): Result {\n        return this.result_value;\n    }\n\n    private needLeftParenthesis(): boolean {\n        return this.rank > this.left.getRank()\n    }\n\n    private needRightParenthesis(): boolean {\n        return this.rank > this.right.getRank() || (!this.associative && this.rank === this.right.getRank())\n    }\n\n    getRank(): OperationRank {\n        return this.rank;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return this.explicitTexParentheses;\n    }\n\n    private buildTex(builder: ArithmeticTexBuilder): string {\n        const leftStr = buildOperandTexStr(this.left, this.needLeftParenthesis() && this.left.useExplicitTexParentheses());\n        const rightStr = buildOperandTexStr(this.right, this.needRightParenthesis() && this.right.useExplicitTexParentheses());\n        return builder(leftStr, rightStr, this.left, this.right);\n    }\n}\n\nexport class FunctionExpression implements Expression {\n\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n\n    constructor(\n        calc: (arg: Result) => Result,\n        buildTex: (arg: string, expr: Expression) => string,\n        private readonly arg: Expression) {\n        this.tex_formula = buildTex(buildOperandTexStr(arg, arg.useExplicitTexParentheses()), arg);\n        this.result_value = calc(arg.getResult());\n    }\n\n    getRank(): OperationRank {\n        return OperationRank.FUNC;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return false;\n    }\n\n    getResult(): number {\n        return this.result_value;\n    }\n\n}\n\n\nclass UnaryMinusExpression implements Expression {\n\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n\n    constructor(\n        private readonly arg: Expression) {\n        this.tex_formula = `{-${arg.getTex()}}`;\n        this.result_value = -arg.getResult();\n    }\n\n    getRank(): OperationRank {\n        return OperationRank.FUNC;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return true;\n    }\n\n    getResult(): number {\n        return this.result_value;\n    }\n\n    getArg(): Expression {\n        return this.arg;\n    }\n\n}\n\nexport function invertExpresson(arg: Expression) {\n    if (arg instanceof UnaryMinusExpression)\n        return arg.getArg();\n    else\n        return new UnaryMinusExpression(arg);\n}","\nexport class Editor {\n    private expression: string = \"\";\n    private static readonly allowed: string = \".0123456789\";\n    getInput(): string {\n        return this.expression;\n    }\n\n    addSymbol(expr: string): boolean {\n        if (expr.length !== 1)\n            return false;\n        if (Editor.allowed.indexOf(expr) === -1)\n            return false;\n        if (expr === '.' && this.expression.indexOf(expr) !== -1)\n            return false;\n        this.expression += expr;\n        return true\n    }\n\n    clear() {\n        this.expression = \"\";\n    }\n\n    backSpace(): boolean {\n        if (this.expression.length > 0) {\n            this.expression = this.expression.slice(0, -1);\n            return true;\n        }\n        return false;\n    }\n\n    notEmpty():boolean {\n        return this.expression.length !== 0;\n    }\n\n}\n","import {ArithmeticExpression, Expression, FunctionExpression, invertExpresson, OperationRank,} from \"./Expression\";\n\n\ninterface OptParam {\n    operandsNumber: number,\n\n    build(...operands: Expression[]): Expression,\n}\n\nconst operationsTable: { [opt: string]: OptParam } = {\n    \"+\": {\n        operandsNumber: 2,\n        build: function (a: Expression, b: Expression) {\n            return new ArithmeticExpression((a, b) => `${a}+${b}`, (a, b) => a + b, OperationRank.PLUS_MINUS, true, true, a, b)\n        },\n    },\n    \"-\": {\n        operandsNumber: 2,\n        build: function (a: Expression, b: Expression) {\n            return new ArithmeticExpression((a, b) => `${a}-${b}`, (a, b) => a - b, OperationRank.PLUS_MINUS, false, true, a, b)\n        },\n    },\n    \"*\": {\n        operandsNumber: 2,\n        build: function (a: Expression, b: Expression) {\n            return new ArithmeticExpression((a, b) => `${a}\\\\times${b}`, (a, b) => a * b, OperationRank.MULT__DIV, true, true, a, b)\n        },\n    },\n    \"/\": {\n        operandsNumber: 2,\n        build: function (a: Expression, b: Expression) {\n            return new ArithmeticExpression((a, b, leftExpr, rightExpr) => `\\\\frac{${leftExpr.getTex()}}{${rightExpr.getTex()}}`, (a, b) => a / b, OperationRank.MULT__DIV, false, true, a, b)\n        },\n    },\n    \"sqrt\": {\n        operandsNumber: 1,\n        build: function (x: Expression) {\n            return new FunctionExpression((x) => Math.sqrt(x), (a, x) => `\\\\sqrt{${x.getTex()}}`, x)\n        },\n    },\n    \"sqr\": {\n        operandsNumber: 1,\n        build: function (x: Expression) {\n            return new FunctionExpression((x) => x * x, (x) => `{${x}}^2`, x)\n        },\n    },\n    \"uminus\": {\n        operandsNumber: 1,\n        build: function (x: Expression) {\n            return invertExpresson(x)\n        },\n\n    }\n};\n\nexport default {\n    buildExpression(operation: string, ...operands: Expression[]): Expression {\n        return operationsTable[operation].build(...operands)\n    },\n\n    operandsNumber(operation: string): number {\n        return operationsTable[operation].operandsNumber;\n    },\n\n    defined(operation: string): boolean {\n        return operation in operationsTable;\n    }\n}\n\n","import {EventEmitter} from 'fbemitter';\n\nimport {AppDispatcher, Event} from \"../dispatcher/AppDispatcher\";\nimport Actions from \"../dispatcher/Actions\";\nimport {Expression, NumberExpression} from \"./Expression\";\nimport {Editor} from \"./Editor\";\nimport ops from \"./operations\";\n\nexport enum ExpressionEvents {\n    INPUT_CHANGE_EVENT = \"INPUT_CHANGE_EVENT\",\n    STACK_CHANGE_EVENT = \"STACK_CHANGE_EVENT\",\n}\n\nclass ExpressionStore {\n    private editor: Editor = new Editor();\n    private stack: Expression[] = [];\n    private emitter: EventEmitter;\n    private dispatcher: typeof AppDispatcher;\n    private dispatchToken: string;\n\n    constructor() {\n        this.dispatcher = AppDispatcher;\n        this.emitter = new EventEmitter();\n        this.dispatchToken = this.dispatcher.register(payload => {\n            this.reactActions(payload);\n        });\n    }\n\n    public getInput(): string {\n        return this.editor.getInput();\n    }\n\n\n    public getStack(): Expression[] {\n        return this.stack;\n    }\n\n    public addChangeListener(event: ExpressionEvents, callback: () => void) {\n        return this.emitter.addListener(event, callback);\n    }\n\n    private reactActions(action: Event) {\n        switch (action.action) {\n            case Actions.ADD_NUMBER:\n                if (this.editor.addSymbol(action.payload)) {\n                    this.emitter.emit(ExpressionEvents.INPUT_CHANGE_EVENT);\n                }\n                break;\n            case Actions.OPERATION:\n                if (this.addOperation(action.payload)) {\n                    this.emitter.emit(ExpressionEvents.INPUT_CHANGE_EVENT);\n                    this.emitter.emit(ExpressionEvents.STACK_CHANGE_EVENT);\n                }\n                break;\n            case Actions.DEL:\n                this.del();\n                break;\n            case Actions.CLEAR:\n                this.clear();\n                break;\n            case Actions.BS:\n                if (this.editor.backSpace()) {\n                    this.emitter.emit(ExpressionEvents.INPUT_CHANGE_EVENT);\n                }\n                break;\n            case Actions.ENTER:\n                if (this.push()) {\n                    this.emitter.emit(ExpressionEvents.INPUT_CHANGE_EVENT);\n                    this.emitter.emit(ExpressionEvents.STACK_CHANGE_EVENT);\n                }\n                break;\n            case Actions.SWAP:\n                this.swap();\n                break;\n        }\n    }\n\n    private push(): boolean {\n        if (this.editor.notEmpty()) {\n            this.stack.push(this.editorExpression());\n            this.editor.clear();\n            return true\n        } else if (this.stack.length > 0) {\n            this.stack.push(this.stack[this.stack.length - 1]);\n            return true\n        } else {\n            return false\n        }\n    }\n\n    private swap() {\n        if (this.stack.length >= 2) {\n            [this.stack[this.stack.length - 1], this.stack[this.stack.length - 2]] = [this.stack[this.stack.length - 2], this.stack[this.stack.length - 1]];\n            this.emitter.emit(ExpressionEvents.STACK_CHANGE_EVENT);\n        }\n    }\n\n    private clear() {\n        this.editor.clear();\n        this.stack = [];\n        this.emitter.emit(ExpressionEvents.INPUT_CHANGE_EVENT);\n        this.emitter.emit(ExpressionEvents.STACK_CHANGE_EVENT);\n    }\n\n\n    private del() {\n        if (this.editor.notEmpty()) {\n            this.editor.clear();\n            this.emitter.emit(ExpressionEvents.INPUT_CHANGE_EVENT);\n        } else if (this.stack.length > 0) {\n            this.stack.pop();\n            this.emitter.emit(ExpressionEvents.STACK_CHANGE_EVENT);\n        }\n    }\n\n    private editorExpression(): Expression {\n        return new NumberExpression(this.editor.getInput())\n    }\n\n    private addOperation(oper: string): boolean {\n        if (!ops.defined(oper)) {\n            return false\n        }\n        const opnNum: number = ops.operandsNumber(oper);\n        const stackGet = opnNum - (this.editor.notEmpty() ? 1 : 0);\n        if (stackGet > this.stack.length) {\n            return false\n        }\n        const operandsExpr = this.stack.splice(-stackGet, stackGet);\n        if (this.editor.notEmpty()) {\n            operandsExpr.push(this.editorExpression());\n            this.editor.clear();\n        }\n        this.stack.push(ops.buildExpression(oper, ...operandsExpr));\n        return true;\n    }\n\n}\n\nconst expressionStore = new ExpressionStore();\nexport {expressionStore};\n","import React from 'react';\nimport {Expression} from \"../stores/Expression\";\n\nimport 'katex/dist/katex.min.css';\nimport {BlockMath} from 'react-katex';\n\nconst ROUND = 6;\n\ninterface Props {\n    expression: Expression;\n}\n\nconst ExpressionPanel: React.FC<Props> = (expression) => {\n    const result = Number(expression.expression.getResult().toFixed(ROUND));\n    const resStr: string = isNaN(result) ? \"?\" : String(result);\n    //Choosing fonts (overrides ,katex): https://katex.org/docs/supported.html#style-color-size-and-font\n    const texStr: string = `${expression.expression.getTex()}=${resStr}`;\n    return (\n        <div className=\"Expression\">\n            <BlockMath math={texStr}/>\n        </div>\n\n    );\n};\n\nexport default ExpressionPanel;\n","import React from 'react';\nimport FBEmitter from \"fbemitter\";\n\nimport {ExpressionEvents, expressionStore} from \"../stores/ExpressionStore\";\nimport ExpressionPanel from \"./ExpressionPanel\";\nimport {Expression} from \"../stores/Expression\";\n\ninterface State {\n    expressions: Expression[];\n}\n\nclass ExpressionStack extends React.Component<any, State> {\n    private eventSubscription: FBEmitter.EventSubscription;\n\n    constructor(props: {}) {\n        super(props,);\n        this.state = ExpressionStack.getStateFromStores();\n        this.eventSubscription = expressionStore.addChangeListener(ExpressionEvents.STACK_CHANGE_EVENT, this.onChange);\n    }\n\n    private static getStateFromStores(): State {\n        return {expressions: expressionStore.getStack()};\n    }\n\n    public componentWillUnmount() {\n        this.eventSubscription.remove();\n    }\n\n    render() {\n        const reversed = this.state.expressions.slice().reverse();\n        return (\n            <div className=\"Stack\">\n                {reversed.map((expr: Expression, index) => <ExpressionPanel expression={expr} key={index}/>)}\n            </div>\n        );\n    }\n\n    private onChange = () => {\n        this.setState(ExpressionStack.getStateFromStores());\n    };\n}\n\nexport default ExpressionStack;\n","import React from 'react';\nimport FBEmitter from \"fbemitter\";\n\nimport {ExpressionEvents, expressionStore} from \"../stores/ExpressionStore\";\n\ninterface State {\n    text: string;\n}\n\nclass InputPanel extends React.Component<any, State> {\n    private eventSubscription: FBEmitter.EventSubscription;\n\n    constructor(props: {}) {\n        super(props,);\n        this.state = InputPanel.getStateFromStores();\n        this.eventSubscription = expressionStore.addChangeListener(ExpressionEvents.INPUT_CHANGE_EVENT, this.onChange);\n    }\n\n    private static getStateFromStores(): State {\n        return {\n            text: expressionStore.getInput()\n        };\n    }\n\n    public componentWillUnmount() {\n        this.eventSubscription.remove();\n    }\n\n    render() {\n        return (\n            <div className=\"Input\">\n                {this.state.text}\n            </div>\n        );\n    }\n\n    private onChange = () => {\n        this.setState(InputPanel.getStateFromStores());\n    };\n}\n\nexport default InputPanel;\n","import React from 'react';\nimport CalcButton from './CalcButton';\nimport ExpressionStack from \"./ExpressionStack\";\nimport InputPanel from \"./InputPanel\";\nimport Actions from \"../dispatcher/Actions\";\nimport './App.css';\n\nconst App: React.FC = () => {\n\n    return (\n        <div className=\"App\">\n            <ExpressionStack/>\n            <InputPanel/>\n            <table className=\"Buttons\">\n                <tbody>\n                <tr>\n                    <td><CalcButton caption=\"7\" tag=\"7\" keybind=\"7\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"8\" tag=\"8\" keybind=\"8\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"9\" tag=\"9\" keybind=\"9\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"/\" tag=\"/\" keybind=\"/\" action={Actions.OPERATION}/></td>\n                    <td><CalcButton caption=\"<-\" keybind=\"Backspace\" action={Actions.BS}/></td>\n                </tr>\n                <tr>\n                    <td><CalcButton caption=\"4\" tag=\"4\" keybind=\"4\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"5\" tag=\"5\" keybind=\"5\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"6\" tag=\"6\" keybind=\"6\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"*\" tag=\"*\" keybind=\"*\" action={Actions.OPERATION}/></td>\n                    <td><CalcButton caption=\"Del\" tag=\"clear\" keybind=\"Delete\" action={Actions.DEL}/></td>\n                </tr>\n                <tr>\n                    <td><CalcButton caption=\"1\" tag=\"1\" keybind=\"1\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"2\" tag=\"2\" keybind=\"2\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"3\" tag=\"3\" keybind=\"3\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"-\" tag=\"-\" keybind=\"-\" action={Actions.OPERATION}/></td>\n                    <td><CalcButton caption=\"Swap\" keybind=\"PageDown\" action={Actions.SWAP}/></td>\n                </tr>\n                <tr>\n                    <td><CalcButton caption=\"0\" tag=\"0\" keybind=\"0\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\".\" tag=\".\" keybind=\".\" action={Actions.ADD_NUMBER}/></td>\n                    <td><CalcButton caption=\"-x\" tag=\"uminus\" action={Actions.OPERATION}/></td>\n                    <td><CalcButton caption=\"+\" tag=\"+\" keybind=\"+\" action={Actions.OPERATION}/></td>\n                    <td><CalcButton caption=\"Reset\" keybind=\"Escape\" action={Actions.CLEAR}/></td>\n                </tr>\n                <tr>\n                    <td><CalcButton caption=\"√\" tag=\"sqrt\" action={Actions.OPERATION}/></td>\n                    <td><CalcButton caption=\"x²\" tag=\"sqr\" action={Actions.OPERATION}/></td>\n                    <td/>\n                    <td/>\n                    <td><CalcButton caption=\"Enter\" keybind=\"Enter\" action={Actions.ENTER}/></td>\n                </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}