{"version":3,"sources":["calculator/Expression.ts","components/CalcButton.tsx","components/ExpressionPanel.tsx","components/ExpressionStack.tsx","components/InputPanel.tsx","calculator/Editor.ts","calculator/operations.ts","calculator/Calculator.ts","calculator/Stack.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["OperationRank","CalcButton","props","onClick","subject","next","type","action","payload","tag","onKeyDown","e","key","keybinding","document","addEventListener","removeEventListener","this","className","caption","React","Component","ExpressionPanel","expression","result","Number","toFixed","resStr","isNaN","String","texStr","texFormula","math","ExpressionStack","subscription","state","expressions","exprStack","subscribe","setState","unsubscribe","reversed","slice","reverse","map","expr","index","Fragment","InputPanel","text","CLEAR_SYMBOL","BS_SYMBOL","Editor","extern","symbolInput","Subject","stringInput","value","outputText","outputValue","inputSymbols","inputString","pipe","mergeAll","filter","allowedSymbols","includes","scan","symbolReducer","str","length","NaN","acc","indexOf","NumberExpression","tex","result_value","toString","parseFloat","NUMBER","buildOperandTexStr","toEmbrace","getTex","ArithmeticExpression","calc","rank","associative","explicitTexParentheses","left","right","tex_formula","buildTex","getResult","getRank","builder","needLeftParenthesis","useExplicitTexParentheses","needRightParenthesis","FunctionExpression","arg","FUNC","UnaryMinusExpression","Operations","operation","operands","operationsTable","build","operandsNumber","a","b","PLUS_MINUS","MULT__DIV","leftExpr","rightExpr","x","Math","sqrt","getArg","CalcInputType","Stack","expressionStack","stack","history","asObservable","popHistory","publishStack","last","pop","num","stashHistory","splice","push","Calculator","calcResult","editorText","BehaviorSubject","editorValue","editorInputSymbols","editorInputString","editor","inputEvent","processInputEvent","bind","editorTextInput","getExpressionsObservable","undefined","combineLatest","distinctUntilChanged","stackResult","getValue","oper","ops","defined","stackGet","editorNotEmpty","getLength","operandsExpr","getTop","editorExpression","addOperation","buildExpression","event","ADD_NUMBER","OPERATION","DEL","del","CLEAR","clear","BS","backSpace","ENTER","duplicate","SWAP","swap","calcInputEvent","calcEditorStringInput","calcEditorStringOutput","calcExpressionStack","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","clipboardData","string","getData","preventDefault","setData","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.159a150f.chunk.js","sourcesContent":["export enum OperationRank {\n    PLUS_MINUS,\n    MULT__DIV,\n    FUNC,\n    NUMBER\n}\n\nexport type Result = number;\n\nexport interface Expression {\n    getResult(): Result;\n\n    getRank(): OperationRank;\n\n    getTex(): string;\n\n    useExplicitTexParentheses(): boolean;\n}\n\nexport class NumberExpression implements Expression {\n    private readonly tex: string;\n    private readonly result_value: number;\n\n    constructor(value: string | number) {\n        if (typeof value === 'number') {\n            this.tex = value.toString();\n            this.result_value = value;\n        } else {\n            this.result_value = parseFloat(value);\n            this.tex = value;\n        }\n    }\n\n    getResult(): Result {\n        return this.result_value;\n    }\n\n    getRank(): number {\n        return OperationRank.NUMBER\n    }\n\n    getTex(): string {\n        return this.tex;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return false;\n    }\n\n}\n\ntype ArithmeticTexBuilder = (leftStr: string, rightStr: string, leftExpr: Expression, rightExpr: Expression) => string;\n\nfunction buildOperandTexStr(expr: Expression, toEmbrace: boolean): string {\n    return toEmbrace ? `\\\\left(${expr.getTex()}\\\\right)` : `${expr.getTex()}`;\n}\n\nexport class ArithmeticExpression implements Expression {\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n    private readonly explicitTexParentheses: boolean;\n\n    constructor(tex: ArithmeticTexBuilder,\n                calc: (...args: Result[]) => Result,\n                private readonly rank: OperationRank,\n                private readonly associative: boolean,\n                explicitTexParentheses: boolean,\n                private readonly left: Expression,\n                private readonly right: Expression) {\n        this.explicitTexParentheses = explicitTexParentheses;\n        this.tex_formula = this.buildTex(tex);\n        this.result_value = calc(left.getResult(), right.getResult());\n    }\n\n    getResult(): Result {\n        return this.result_value;\n    }\n\n    getRank(): OperationRank {\n        return this.rank;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return this.explicitTexParentheses;\n    }\n\n    private needLeftParenthesis(): boolean {\n        return this.rank > this.left.getRank()\n    }\n\n    private needRightParenthesis(): boolean {\n        return this.rank > this.right.getRank() || (!this.associative && this.rank === this.right.getRank())\n    }\n\n    private buildTex(builder: ArithmeticTexBuilder): string {\n        const leftStr = buildOperandTexStr(this.left, this.needLeftParenthesis() && this.left.useExplicitTexParentheses());\n        const rightStr = buildOperandTexStr(this.right, this.needRightParenthesis() && this.right.useExplicitTexParentheses());\n        return builder(leftStr, rightStr, this.left, this.right);\n    }\n}\n\nexport class FunctionExpression implements Expression {\n\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n\n    constructor(\n        calc: (arg: Result) => Result,\n        buildTex: (arg: string, expr: Expression) => string,\n        private readonly arg: Expression) {\n        this.tex_formula = buildTex(buildOperandTexStr(arg, arg.useExplicitTexParentheses()), arg);\n        this.result_value = calc(arg.getResult());\n    }\n\n    getRank(): OperationRank {\n        return OperationRank.FUNC;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return false;\n    }\n\n    getResult(): number {\n        return this.result_value;\n    }\n\n}\n\n\nclass UnaryMinusExpression implements Expression {\n\n    private readonly tex_formula: string;\n    private readonly result_value: number;\n\n    constructor(\n        private readonly arg: Expression) {\n        this.tex_formula = `{-${buildOperandTexStr(arg, arg.useExplicitTexParentheses())}}`;\n        this.result_value = -arg.getResult();\n    }\n\n    getRank(): OperationRank {\n        return OperationRank.FUNC;\n    }\n\n    getTex(): string {\n        return this.tex_formula;\n    }\n\n    useExplicitTexParentheses(): boolean {\n        return true;\n    }\n\n    getResult(): number {\n        return this.result_value;\n    }\n\n    getArg(): Expression {\n        return this.arg;\n    }\n\n}\n\nexport function invertExpresson(arg: Expression) {\n    if (arg instanceof UnaryMinusExpression)\n        return arg.getArg();\n    else\n        return new UnaryMinusExpression(arg);\n}","import React from 'react';\nimport {Observer} from \"rxjs\";\nimport {CalcInputEvent, CalcInputType} from \"../calculator/Calculator\";\n\n\ninterface Props {\n    caption: string;\n    tag?: string;\n    action: CalcInputType;\n    keybinding?: string;\n    subject: Observer<CalcInputEvent>;\n}\n\nclass CalcButton extends React.Component<Props, any> {\n    constructor(props: Props) {\n        super(props,);\n        document.addEventListener(\"keydown\", this.onKeyDown)\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener(\"keydown\", this.onKeyDown);\n    }\n\n    public render() {\n        return (\n            <div onClick={this.onClick} className={\"Button\"}>\n                {this.props.caption}\n            </div>\n        );\n    }\n\n    private onClick = () => {\n        this.props.subject.next({type: this.props.action, payload: this.props.tag})\n    };\n\n    private onKeyDown = (e: KeyboardEvent) => {\n        if (e.key === this.props.keybinding) {\n            this.onClick()\n        }\n        // console.log(e)\n    }\n}\n\nexport default CalcButton;\n","import React from 'react';\n\nimport 'katex/dist/katex.min.css';\nimport {BlockMath} from 'react-katex';\nimport {StackItem} from \"../calculator/Calculator\";\n\nconst ROUND = 6;\n\ninterface Props {\n    expression: StackItem;\n}\n\nconst ExpressionPanel: React.FC<Props> = (expression) => {\n    const result = Number(expression.expression.result.toFixed(ROUND));\n    const resStr: string = isNaN(result) ? \"?\" : String(result);\n    //Choosing fonts (overrides ,katex): https://katex.org/docs/supported.html#style-color-size-and-font\n    const texStr: string = `${expression.expression.texFormula}=${resStr}`;\n    return (\n        <div className=\"Expression\">\n            <BlockMath math={texStr}/>\n        </div>\n\n    );\n};\n\nexport default ExpressionPanel;\n","import React from 'react';\nimport ExpressionPanel from \"./ExpressionPanel\";\nimport {StackItem} from \"../calculator/Calculator\";\nimport {Observable, Subscription} from \"rxjs\";\n\ninterface State {\n    expressions: StackItem[];\n}\n\ninterface Props {\n    exprStack: Observable<StackItem[]>;\n}\n\nclass ExpressionStack extends React.Component<any, State> {\n    private readonly subscription?: Subscription;\n\n    constructor(props: Props) {\n        super(props,);\n        this.state = {expressions: []};\n        this.subscription = props.exprStack.subscribe((expressions) => {\n            this.setState({expressions})\n        })\n    }\n\n\n    public componentWillUnmount() {\n        this.subscription && this.subscription.unsubscribe();\n    }\n\n    render() {\n        const reversed = this.state.expressions.slice().reverse();\n        return (\n            <div className=\"Stack\">\n                {reversed.map((expr: StackItem, index) =>\n                    <React.Fragment key={index}>\n                        {index ? <hr/> : null}\n                        <ExpressionPanel expression={expr}/>\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ExpressionStack;\n","import React from 'react';\n\nimport {Observable, Subscription} from \"rxjs\";\n\ninterface State {\n    text: string;\n}\n\ninterface Props {\n    text: Observable<string>;\n}\n\nclass InputPanel extends React.Component<any, State> {\n    subscription: Subscription;\n\n    constructor(props: Props) {\n        super(props,);\n        this.state = {text: \"\"};\n        this.subscription = props.text.subscribe((text) => {\n            this.setState({text})\n        })\n\n    }\n\n    public componentWillUnmount() {\n        this.subscription.unsubscribe();\n    }\n\n    render() {\n        return (\n            <div className=\"Input\">\n                {this.state.text}\n            </div>\n        );\n    }\n\n}\n\nexport default InputPanel;\n","import {Observable, Observer, Subject} from \"rxjs\";\nimport {filter, map, mergeAll, scan} from \"rxjs/operators\";\n\nexport interface EditorSignals {\n    outputText?: Observer<string>,\n    outputValue?: Observer<number>,\n    inputSymbols?: Observable<string>,\n    inputString?: Observable<string>\n}\n\nexport const CLEAR_SYMBOL = \"DEL\"\nexport const BS_SYMBOL = \"BS\"\n\nexport class Editor {\n    private static readonly allowedSymbols: string[] = [\n        '.', ',', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n        CLEAR_SYMBOL, BS_SYMBOL\n    ];\n    private readonly symbolInput = new Subject<string>();\n    private readonly stringInput = new Subject<string>();\n    private readonly expression = new Subject<string>();\n    private readonly value = new Subject<number>();\n\n    constructor(extern: EditorSignals) {\n        this.expression.subscribe(extern.outputText)\n        this.value.subscribe(extern.outputValue)\n        extern.inputSymbols?.subscribe(this.symbolInput)\n        extern.inputString?.subscribe(this.stringInput)\n\n        this.stringInput.pipe(mergeAll()).subscribe(this.symbolInput)\n        this.symbolInput.pipe(\n            filter(value => Editor.allowedSymbols.includes(value)),\n            scan(Editor.symbolReducer, \"\")\n        ).subscribe(this.expression);\n        this.expression.pipe(map(str => str.length ? Number(str) : NaN)).subscribe(this.value)\n    }\n\n    private static symbolReducer(acc: string, expr: string) {\n        if (expr === BS_SYMBOL) {\n            if (acc.length > 0) {\n                return acc.slice(0, -1);\n            } else {\n                return acc;\n            }\n        }\n        if (expr === CLEAR_SYMBOL) {\n            return \"\"\n        }\n        if (expr === ',')\n            expr = '.'\n        if (expr === '.' && acc.indexOf(expr) !== -1)\n            return acc;\n        return acc + expr;\n    }\n\n}\n","import {ArithmeticExpression, Expression, FunctionExpression, invertExpresson, OperationRank,} from \"./Expression\";\n\n\ninterface OptParam {\n    operandsNumber: number,\n\n    build(...operands: Expression[]): Expression,\n}\n\nexport default class Operations {\n    static readonly operationsTable: { [opt: string]: OptParam } = {\n        \"+\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}+${b}`, (a, b) => a + b, OperationRank.PLUS_MINUS, true, true, a, b)\n            },\n        },\n        \"-\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}-${b}`, (a, b) => a - b, OperationRank.PLUS_MINUS, false, true, a, b)\n            },\n        },\n        \"*\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b) => `${a}\\\\times${b}`, (a, b) => a * b, OperationRank.MULT__DIV, true, true, a, b)\n            },\n        },\n        \"/\": {\n            operandsNumber: 2,\n            build: function (a: Expression, b: Expression) {\n                return new ArithmeticExpression((a, b, leftExpr, rightExpr) => `\\\\frac{${leftExpr.getTex()}}{${rightExpr.getTex()}}`, (a, b) => a / b, OperationRank.MULT__DIV, false, true, a, b)\n            },\n        },\n        \"sqrt\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return new FunctionExpression((x) => Math.sqrt(x), (a, x) => `\\\\sqrt{${x.getTex()}}`, x)\n            },\n        },\n        \"sqr\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return new FunctionExpression((x) => x * x, (x) => `{${x}}^2`, x)\n            },\n        },\n        \"uminus\": {\n            operandsNumber: 1,\n            build: function (x: Expression) {\n                return invertExpresson(x)\n            },\n\n        }\n    };\n\n    static buildExpression(operation: string, ...operands: Expression[]): Expression {\n        return this.operationsTable[operation].build(...operands)\n    }\n\n    static operandsNumber(operation: string): number {\n        return this.operationsTable[operation].operandsNumber;\n    }\n\n    static defined(operation: string): boolean {\n        return operation in this.operationsTable;\n    }\n}\n\n","import {BS_SYMBOL, CLEAR_SYMBOL, Editor} from \"./Editor\";\nimport {Expression, NumberExpression} from \"./Expression\";\nimport ops from \"./operations\";\nimport {BehaviorSubject, combineLatest, Observable, Observer, Subject} from \"rxjs\"\nimport {distinctUntilChanged, map} from \"rxjs/operators\";\nimport {Stack} from \"./Stack\";\n\n\nexport enum CalcInputType {\n    ADD_NUMBER,\n    OPERATION,\n    ENTER,\n    SWAP,\n    BS,\n    DEL,\n    CLEAR\n}\n\nexport interface CalcInputEvent {\n    type: CalcInputType;\n    payload?: string;\n}\n\nexport interface StackItem {\n    readonly texFormula: string\n    readonly result: number\n}\n\nexport interface CalculatorSignals {\n    inputEvent?: Observable<CalcInputEvent>,\n    editorTextInput?: Observable<string>,\n    result?: Observer<number>\n    editorText?: Observer<string>,\n    expressionStack?: Observer<StackItem[]>\n    stackResult?: Observer<StackItem | undefined>;\n}\n\nexport class Calculator {\n\n    private readonly calcResult = new Subject<StackItem | undefined>();\n    private readonly expressionStack = new Subject<StackItem[]>();\n    private readonly stack = new Stack();\n    private readonly editorText = new BehaviorSubject<string>(\"\")\n    private readonly editorValue = new BehaviorSubject<number>(NaN)\n    private readonly editorInputSymbols = new Subject<string>();\n    private readonly editorInputString = new Subject<string>();\n    private readonly editor = new Editor({\n        outputText: this.editorText,\n        inputSymbols: this.editorInputSymbols,\n        inputString: this.editorInputString,\n        outputValue: this.editorValue\n    });\n\n    constructor(extern: CalculatorSignals) {\n        extern.inputEvent?.subscribe(this.processInputEvent.bind(this))\n        extern.editorTextInput?.subscribe(this.editorInputString)\n\n        this.stack.getExpressionsObservable().pipe(\n            map((exprStack: Expression[]): StackItem[] => exprStack.map((expr: Expression): StackItem => {\n                return {\n                    texFormula: expr.getTex(),\n                    result: expr.getResult()\n                }\n            }))\n        ).subscribe(this.expressionStack)\n\n        this.expressionStack.pipe(\n            map((stack: StackItem[]) =>\n                stack[stack.length - 1] ? stack[stack.length - 1] : undefined\n            )\n        ).subscribe(this.calcResult);\n\n        combineLatest([this.editorValue, this.calcResult]).pipe(\n            map(([editor, stack]) => {\n                return !isNaN(editor) ? editor : (stack ? stack.result : NaN)\n            }),\n            distinctUntilChanged()\n        ).subscribe(extern.result)\n        this.expressionStack.subscribe(extern.expressionStack)\n        this.calcResult.subscribe(extern.stackResult)\n        this.editorText.subscribe(extern.editorText)\n\n    }\n\n    private editorExpression(): Expression {\n        return new NumberExpression(this.editorText.getValue())\n    }\n\n    private editorNotEmpty(): boolean {\n        return this.editorText.getValue().length !== 0;\n    }\n\n\n    private addOperation(oper: string) {\n        // operation is unknown\n        if (!ops.defined(oper)) {\n            return\n        }\n\n        // we must have in stack as much items as we need for operation\n        const opnNum: number = ops.operandsNumber(oper);\n        const stackGet = opnNum - (this.editorNotEmpty() ? 1 : 0);\n        if (stackGet > this.stack.getLength()) {\n            return\n        }\n\n        const operandsExpr: Expression[] = this.stack.getTop(stackGet)\n\n        if (this.editorNotEmpty()) {\n            operandsExpr.push(this.editorExpression());\n            this.editorInputSymbols.next(CLEAR_SYMBOL);\n        }\n        this.stack.addOperation(ops.buildExpression(oper, ...operandsExpr));\n    }\n\n    private processInputEvent(event: CalcInputEvent) {\n        switch (event.type) {\n            case CalcInputType.ADD_NUMBER:\n                event.payload && this.editorInputSymbols.next(event.payload);\n                break;\n            case CalcInputType.OPERATION:\n                event.payload && this.addOperation(event.payload);\n                break;\n            case CalcInputType.DEL:\n                if (this.editorNotEmpty()) {\n                    this.editorInputSymbols.next(CLEAR_SYMBOL);\n                } else {\n                    this.stack.del()\n                }\n                break;\n            case CalcInputType.CLEAR:\n                this.editorInputSymbols.next(CLEAR_SYMBOL);\n                this.stack.clear()\n                break;\n            case CalcInputType.BS:\n                if (this.editorNotEmpty()) {\n                    this.editorInputSymbols.next(BS_SYMBOL)\n                } else {\n                    this.stack.backSpace()\n                }\n                break;\n            case CalcInputType.ENTER:\n                if (this.editorNotEmpty()) {\n                    this.stack.push(this.editorExpression());\n                    this.editorInputSymbols.next(CLEAR_SYMBOL);\n                } else {\n                    this.stack.duplicate()\n                }\n                break;\n            case CalcInputType.SWAP:\n                if (this.editorNotEmpty()) {\n                    this.stack.push(this.editorExpression());\n                    this.editorInputSymbols.next(CLEAR_SYMBOL);\n                }\n                this.stack.swap();\n                break;\n        }\n    }\n}","import {Observable, Subject} from \"rxjs\";\nimport {Expression} from \"./Expression\";\n\nexport class Stack {\n    private readonly expressionStack = new Subject<Expression[]>();\n    private stack: Expression[] = [];\n    private history: Expression[][] = [];\n\n    public getExpressionsObservable(): Observable<Expression[]> {\n        return this.expressionStack.asObservable();\n    }\n\n    public backSpace() {\n        if (this.popHistory()) {\n            this.publishStack()\n        }\n    }\n\n    public popHistory(): boolean {\n        const last = this.history.pop();\n\n        if (last) {\n            this.stack = last;\n            return true;\n        } else {\n            return false\n        }\n    }\n\n    public getLength() {\n        return this.stack.length\n    }\n\n    public getTop(num: number): Expression[] {\n        this.stashHistory();\n        return this.stack.splice(-num, num);\n    }\n\n    public addOperation(expr: Expression) {\n        this.stack.push(expr);\n        this.publishStack()\n    }\n\n    public push(expr: Expression) {\n        this.stashHistory();\n        this.stack.push(expr);\n        this.publishStack()\n    }\n\n    public duplicate() {\n        if (this.stack.length > 0) {\n            this.stashHistory();\n            this.stack.push(this.stack[this.stack.length - 1]);\n            this.publishStack()\n        }\n    }\n\n    public swap() {\n        if (this.stack.length >= 2) {\n            this.stashHistory();\n            [this.stack[this.stack.length - 1], this.stack[this.stack.length - 2]] = [this.stack[this.stack.length - 2], this.stack[this.stack.length - 1]];\n            this.publishStack()\n        }\n    }\n\n    public clear() {\n        this.history = [];\n        this.stack = [];\n        this.publishStack()\n    }\n\n    public del() {\n        if (this.stack.length > 0) {\n            this.stashHistory();\n            this.stack.pop();\n            this.publishStack()\n        }\n    }\n\n    private publishStack() {\n        this.expressionStack.next(this.stack)\n    }\n\n    private stashHistory() {\n        this.history.push([...this.stack]);\n    }\n\n\n}","import React from 'react';\nimport CalcButton from './CalcButton';\nimport ExpressionStack from \"./ExpressionStack\";\nimport InputPanel from \"./InputPanel\";\nimport './App.css';\nimport {CalcInputEvent, CalcInputType, Calculator, StackItem} from \"../calculator/Calculator\";\nimport {BehaviorSubject, Subject} from \"rxjs\";\n\nconst CLIPBOARD_ROUND = 8;\n\nconst calcInputEvent = new Subject<CalcInputEvent>();\nconst calcEditorStringInput = new Subject<string>();\nconst calcEditorStringOutput = new Subject<string>();\nconst calcResult = new BehaviorSubject<number>(NaN);\nconst calcExpressionStack = new Subject<StackItem[]>()\n\nnew Calculator({\n    inputEvent: calcInputEvent,\n    editorTextInput: calcEditorStringInput,\n    result: calcResult,\n    editorText: calcEditorStringOutput,\n    expressionStack: calcExpressionStack\n});\n\nconst App: React.FC = () => {\n    return (\n        <div className=\"App\">\n            <ExpressionStack exprStack={calcExpressionStack}/>\n            <InputPanel text={calcEditorStringOutput}/>\n            <div className=\"Pad\">\n                <table className=\"Buttons\">\n                    <tbody>\n                    {/*<tr>*/}\n                    {/*    <td/><td/><td/><td/>*/}\n                    {/*    <td>*/}\n                    {/*        <div className={\"Button\"} onClick={(event: any) => { console.log(\"PASTE\") }}>*/}\n                    {/*            Paste*/}\n                    {/*        </div>*/}\n                    {/*    </td>*/}\n                    {/*</tr>*/}\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"7\" tag=\"7\" keybinding=\"7\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"8\" tag=\"8\" keybinding=\"8\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"9\" tag=\"9\" keybinding=\"9\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"/\" tag=\"/\" keybinding=\"/\" action={CalcInputType.OPERATION}\n                                        subject={calcInputEvent}/></td>\n                        <td><CalcButton caption=\"<-\" keybinding=\"Backspace\" action={CalcInputType.BS}\n                                        subject={calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"4\" tag=\"4\" keybinding=\"4\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"5\" tag=\"5\" keybinding=\"5\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"6\" tag=\"6\" keybinding=\"6\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"*\" tag=\"*\" keybinding=\"*\" action={CalcInputType.OPERATION}\n                                        subject={calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Del\" tag=\"clear\" keybinding=\"Delete\" action={CalcInputType.DEL}\n                                        subject={calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"1\" tag=\"1\" keybinding=\"1\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"2\" tag=\"2\" keybinding=\"2\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\"3\" tag=\"3\" keybinding=\"3\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td><CalcButton caption=\"-\" tag=\"-\" keybinding=\"-\" action={CalcInputType.OPERATION}\n                                        subject={calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Swap\" keybinding=\"PageDown\" action={CalcInputType.SWAP}\n                                        subject={calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td className=\"Num\"><CalcButton caption=\"0\" tag=\"0\" keybinding=\"0\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td className=\"Num\"><CalcButton caption=\".\" tag=\".\" keybinding=\".\"\n                                                        action={CalcInputType.ADD_NUMBER}\n                                                        subject={calcInputEvent}/>\n                        </td>\n                        <td/>\n                        <td><CalcButton caption=\"+\" tag=\"+\" keybinding=\"+\" action={CalcInputType.OPERATION}\n                                        subject={calcInputEvent}/></td>\n                        <td><CalcButton caption=\"Reset\" keybinding=\"Escape\" action={CalcInputType.CLEAR}\n                                        subject={calcInputEvent}/></td>\n                    </tr>\n                    <tr>\n                        <td><CalcButton caption=\"√\" tag=\"sqrt\" keybinding=\"\\\" action={CalcInputType.OPERATION}\n                                        subject={calcInputEvent}/></td>\n                        <td><CalcButton caption=\"x²\" tag=\"sqr\" action={CalcInputType.OPERATION}\n                                        subject={calcInputEvent}/></td>\n                        <td><CalcButton caption=\"-x\" tag=\"uminus\" action={CalcInputType.OPERATION}\n                                        subject={calcInputEvent}/></td>\n                        <td/>\n                        <td><CalcButton caption=\"Enter\" keybinding=\"Enter\" action={CalcInputType.ENTER}\n                                        subject={calcInputEvent}/></td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    );\n};\n\n\nexport function registerClipboardSupport() {\n\n    function toSeasonableString(x: number): string {\n        return String(Number(x.toFixed(CLIPBOARD_ROUND)))\n    }\n\n    window.document.addEventListener('paste', (e) => {\n        if (e.clipboardData) {\n            const string = e.clipboardData.getData('text/plain');\n            calcEditorStringInput.next(string)\n        }\n        e.preventDefault();\n    });\n\n    window.document.addEventListener('copy', (e) => {\n        const result = calcResult.getValue();\n        if (!isNaN(result)) {\n            e.clipboardData && e.clipboardData.setData('text/plain', toSeasonableString(result));\n        }\n        e.preventDefault();\n    });\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App, {registerClipboardSupport} from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nregisterClipboardSupport();\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}